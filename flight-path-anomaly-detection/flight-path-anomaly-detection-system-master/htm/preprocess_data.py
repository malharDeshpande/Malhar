#!/usr/bin/env python
# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2014, Numenta, Inc.  Unless you have purchased from
# Numenta, Inc. a separate commercial license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------
"""
Takes in a datafile generated by Grok Hound app.

- Strips out non-commutes
- Sub-samples readings to a minimum resolution of 10-seconds
"""

import datetime


def preprocess(flightPathCollection, verbose=False):
    lastTimestamp = None
    lastTimestampKept = None
    numStationary = 0
    preprocessedData = []

    for record in flightPathCollection:
        sequence = []
        for trackPoint in record['flightPath']:
            timestamp = datetime.datetime.fromtimestamp(int(trackPoint['timestamp']) / 1e3)
            # speed = float(trackPoint['planeSpeed'])

            keep = True

            if lastTimestamp and (timestamp - lastTimestamp).total_seconds() > 300:
                keep = False

            if lastTimestampKept and (timestamp - lastTimestampKept).total_seconds() < 250:
                keep = False

            # if speed <= 0.5:
            #     numStationary += 1
            # else:
            #     numStationary = 0
            #
            # if numStationary > 30:
            #     keep = False

            lastTimestamp = timestamp

            if keep:
                if verbose:
                    print "Keeping track point:\t{0}".format(trackPoint)
                lastTimestampKept = timestamp
                sequence.append(trackPoint)
            else:
                if verbose:
                    print "Discarding track point:\t{0}".format(trackPoint)

        if len(sequence) > 0:
            preprocessedData.append(sequence)

    return preprocessedData